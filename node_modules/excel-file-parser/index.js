exports.excelFileParser = function(fileName, tabName, metadataFields){
    var assert = require('assert');
    console.log(metadataFields);
    if(typeof require !== 'undefined') XLSX = require('xlsx');

    var mongodb = require('mongodb');
    var _ = require('underscore');

    var  distinctDataFields;

    var MongoClient = mongodb.MongoClient;

    var url = 'mongodb://localhost:27017/datamanager-03-test';

        var workbook = XLSX.readFile('./uploads/' + fileName);

        var worksheet = workbook.Sheets[tabName];

        var json_conversion = XLSX.utils.sheet_to_json(worksheet);

        var metaFields = metadataFields;

    var collectionFields = [];

        MongoClient.connect(url, function (err, db) {
            if (err) {
                console.log('Unable to connect to the mongoDB server. Error:', err);
            } else {
                console.log('Connection established to', url);

                var categoryName = metaFields.subjectCategory;

                var collectionName = categoryName.replace(/ /g,"_");



                db.open(function(err, client){
                    client.createCollection(collectionName, function(err, col) {
                        client.collection(collectionName, function(err, col) {
                            {
                                var headerObject = json_conversion[0];

                                var headers = "";

                                for(var header in headerObject) {
                                    headers += header + ",";
                                }

                                collectionFields = headers.split(',');

                                json_conversion.forEach(function(record) {
                                    record.OriginalDocumentName = fileName;
                                    record.DocumentAuthor = metaFields.documentAuthor;
                                    record.TabName = tabName;
                                    record.SubjectCategory = metaFields.subjectCategory;
                                    record.Subject = metaFields.subject;
                                    record.DateDocumentProduced = metaFields.dateDocumentProduced;
                                    record.DateDocumentReceived = metaFields.dateDocumentReceived;
                                    record.DocumentSubmitter = metaFields.documentSubmitter;
                                    record.DocumentReviewer = metaFields.documentReviewer;
                                    record.OriginalSource = metadataFields.originalSource,
                                    record.DataVersion = metadataFields.dataVersion,
                                    record.DataFields = headers;
                                    col.insert(record, function(err, result) {
                                        if(err) {
                                            console.log(err);
                                        }
                                        else {

                                        }
                                    });
                                })
                            }
                        });



                        client.collection(collectionName, function(err, col) {

                            col.distinct("DataFields",(function(err, docs){
                                console.log('Distinct Data Fields:  ' + docs);

                                var fields = [];

                                if(docs[0]){
                                    fields = docs[0].split(',');
                                }
                                else {
                                    fields = collectionFields;

                                }


                                db.collection('collections_metadata').update(
                                    {
                                        collectionName: collectionName
                                    },

                                    {
                                        $set:
                                        {
                                            collectionName: collectionName,
                                            dataFields: fields,
                                            dataVersions:   []
                                        }
                                    },
                                    {upsert: true}
                                )
                            }));

                            var dataVersions = [];

                                 db.collection('collections_metadata')
                                    .find({collectionName: collectionName}).toArray(function(err,docs){

                                         if(docs[0]){
                                             if(docs[0].dataVersions.length>0){
                                                 dataVersions = docs[0].dataVersions;
                                             }
                                             else {
                                                 dataVersions = dataVersions.push(metadataFields.dataVersion);
                                             }

                                         }
                                         else {
                                             dataVersions.push(metadataFields.dataVersion);

                                         }


                                         if(!_.contains(dataVersions, metadataFields.dataVersion)) {
                                             dataVersions.push(metadataFields.dataVersion);
                                             console.log('dataVersions:  ' + docs[0].dataVersions);
                                         }

                                             db.collection('collections_metadata').update(
                                                 {
                                                     collectionName: collectionName
                                                 },
                                                 {
                                                     $set:
                                                     {
                                                         dataVersions: dataVersions
                                                     }
                                                 }
                                                 ,
                                                 {upsert: true}
                                             )


                                     });
                        })
                    });

                });

                console.log("finished");
                db.close();
            }
        });
};
