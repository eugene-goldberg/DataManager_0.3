exports.excelFileParser = function(fileName, tabName, metadataFields){
    var assert = require('assert');
    console.log(metadataFields);
    if(typeof require !== 'undefined') XLSX = require('xlsx');

    var mongodb = require('mongodb');
    var _ = require('underscore');

    var fs = require('fs');

    var Converter=require("csvtojson").core.Converter;

    var  distinctDataFields;

    var collectionFields = [];

    var MongoClient = mongodb.MongoClient;

    var url = 'mongodb://localhost:27017/datamanager-03-test';

    var workbook = XLSX.readFile('./uploads/' + fileName);

    var worksheet = workbook.Sheets[tabName];

    var metaFields = metadataFields;

    var json_conversion = XLSX.utils.sheet_to_json(worksheet);

    var csv_conversion = XLSX.utils.sheet_to_csv(worksheet);

    var csv_lines = csv_conversion.split('\n');

    var dirtyHeaderLine = csv_lines[0];

    var cleanHeaderLine = dirtyHeaderLine.replace(/\./g,"")
        .replace(/ /g,"")
        .replace(/"'"/g,"")
        .replace(/","/g,"")
        .replace(/"\/"/g,"")
        .replace(/"#"/g,"")
        .replace(/\(/g,"")
        .replace(/\)/g,"");

    cleanHeaderLine = cleanHeaderLine.replace(/,+$/, "");

    console.log(cleanHeaderLine);

    csv_lines[0] = cleanHeaderLine;

    var newCsvLines = [];

    csv_lines.forEach(function(line){
        if (line.charAt(0) == ',') { line = line.slice(1); }
        var currentIndex = csv_lines.indexOf(line);
        if(currentIndex === 0){
            newCsvLines.push(line);
        }
        else {
            newCsvLines.push("\n" + line);
        }
    });

    var csvFileName = './uploads/' + fileName + '_clean.csv';

    fs.writeFileSync(csvFileName, newCsvLines);

    var fileStream=fs.createReadStream(csvFileName);
//new converter instance
    var csvConverter=new Converter({constructResult:true});

    //end_parsed will be emitted once parsing finished
    csvConverter.on("end_parsed",function(jsonObj){
        //console.log(jsonObj); //here is your result json object
        makeRecords(jsonObj);

    });

    //read from file
    fileStream.pipe(csvConverter);

    function makeRecords(result){
        console.log(result.length);

        MongoClient.connect(url, function (err, db) {
            if (err) {
                console.log('Unable to connect to the mongoDB server. Error:', err);
            } else {
                console.log('Connection established to', url);

                var categoryName = metaFields.subjectCategory;

                var collectionName = categoryName.replace(/ /g,"_");

                db.open(function(err, client){
                    client.createCollection(collectionName, function(err, col) {
                    });

                    var collection = db.collection(collectionName);

                    for(var i =0;i < result.length; i++){
                        //console.log(result[i]);

                        var inserted = 0;

                        for(var i = 0;i < result.length; i++) {
                            var dataRecord = result[i];

                                dataRecord.OriginalDocumentName = fileName;
                                dataRecord.DocumentAuthor = metaFields.documentAuthor;
                                dataRecord.TabName = tabName;
                                dataRecord.SubjectCategory = metaFields.subjectCategory;
                                dataRecord.Subject = metaFields.subject;
                                dataRecord.DateDocumentProduced = metaFields.dateDocumentProduced;
                                dataRecord.DateDocumentReceived = metaFields.dateDocumentReceived;
                                dataRecord.DocumentSubmitter = metaFields.documentSubmitter;
                                dataRecord.DocumentReviewer = metaFields.documentReviewer;
                                dataRecord.OriginalSource = metadataFields.originalSource,
                                dataRecord.DataVersion = metadataFields.dataVersion,
                                dataRecord.DataFields = newCsvLines[0];

                            collection.insert(dataRecord, function (err) {
                                if (++inserted == result.length) {
                                    console.log("finished");
                                    db.close();
                                }
                            });
                        }
                    }
                });

                /////////////////////////////////////

                db.open(function(err, client) {
                    client.createCollection(collectionName, function (err, col) {
                    });

                    client.collection(collectionName, function (err, col) {

                        var dataVersions = [];

                        col.distinct("DataFields", (function (err, docs) {
                            console.log('Distinct Data Fields:  ' + docs);

                            var fields = [];

                            if (docs[0]) {
                                fields = docs[0].split(',');
                            }
                            else {
                                fields = collectionFields;
                                dataVersions = ['1'];
                            }

                            db.collection('collections_metadata').update(
                                {
                                    collectionName: collectionName
                                },
                                {
                                    $set: {
                                        collectionName: collectionName,
                                        dataFields: fields,
                                        dataVersions: dataVersions
                                    }
                                },
                                {upsert: true}
                            )
                        }));
                    })

                    ///////////////////////////

                    db.collection('collections_metadata')
                        .find({collectionName: collectionName}).toArray(function (err, docs) {

                            if (docs[0]) {
                                dataVersions = docs[0].dataVersions;
                                if (!_.contains(dataVersions, metadataFields.dataVersion)) {

                                    dataVersions.push(metadataFields.dataVersion);

                                    db.collection('collections_metadata').update(
                                        {
                                            collectionName: collectionName
                                        },
                                        {
                                            $set: {
                                                dataVersions: dataVersions
                                            }
                                        }
                                        ,
                                        {upsert: true}
                                    )
                                }
                                else {
                                    db.collection('collections_metadata').update(
                                        {
                                            collectionName: collectionName
                                        },
                                        {
                                            $set: {
                                                dataVersions: dataVersions
                                            }
                                        }
                                        ,
                                        {upsert: true}
                                    )
                                }

                            }
                            else {
                                dataVersions = ['1'];
                                db.collection('collections_metadata').update(
                                    {
                                        collectionName: collectionName
                                    },
                                    {
                                        $set: {
                                            dataVersions: dataVersions
                                        }
                                    }
                                    ,
                                    {upsert: true}
                                )
                            }


                            //////////////////////////////

                        });
                })


                /////////////////////////////////
            }
        });

    }
};
